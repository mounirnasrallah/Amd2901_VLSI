--
-- Generated by VASY
--
ENTITY alu IS
PORT(
  alu_out	: INOUT BIT_VECTOR(3 DOWNTO 0);
  cin	: IN BIT;
  cout	: OUT BIT;
  i	: IN BIT_VECTOR(2 DOWNTO 0);
  ng	: OUT BIT;
  np	: OUT BIT;
  ovr	: OUT BIT;
  r	: IN BIT_VECTOR(3 DOWNTO 0);
  s	: IN BIT_VECTOR(3 DOWNTO 0);
  f3	: OUT BIT;
  vdd	: IN BIT;
  vss	: IN BIT;
  zero	: OUT BIT
);
END alu;

ARCHITECTURE VBE OF alu IS

  SIGNAL p	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL g	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL c3	: BIT;
  SIGNAL c4	: BIT;
  SIGNAL c	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL k	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL sig1	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL sig2	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL sig3	: BIT_VECTOR(3 DOWNTO 0);
BEGIN

  sig1(3) <= NOT((r(3) XOR k(0)) AND (s(3) XOR k(1)));
  sig2(3) <= NOT((r(3) XOR k(0)) OR (s(3) XOR k(1)));
  c(4) <= NOT(sig1(3) AND NOT(NOT(sig2(3)) AND c(3)));
  sig3(3) <= (NOT(k(2) OR sig1(3)) XOR NOT(k(3) OR sig2(3)));
  alu_out(3) <= NOT(sig3(3) XOR NOT(k(4) OR c(3)));
  sig1(2) <= NOT((r(2) XOR k(0)) AND (s(2) XOR k(1)));
  sig2(2) <= NOT((r(2) XOR k(0)) OR (s(2) XOR k(1)));
  c(3) <= NOT(sig1(2) AND NOT(NOT(sig2(2)) AND c(2)));
  sig3(2) <= (NOT(k(2) OR sig1(2)) XOR NOT(k(3) OR sig2(2)));
  alu_out(2) <= NOT(sig3(2) XOR NOT(k(4) OR c(2)));
  sig1(1) <= NOT((r(1) XOR k(0)) AND (s(1) XOR k(1)));
  sig2(1) <= NOT((r(1) XOR k(0)) OR (s(1) XOR k(1)));
  c(2) <= NOT(sig1(1) AND NOT(NOT(sig2(1)) AND c(1)));
  sig3(1) <= (NOT(k(2) OR sig1(1)) XOR NOT(k(3) OR sig2(1)));
  alu_out(1) <= NOT(sig3(1) XOR NOT(k(4) OR c(1)));
  sig1(0) <= NOT((r(0) XOR k(0)) AND (s(0) XOR k(1)));
  sig2(0) <= NOT((r(0) XOR k(0)) OR (s(0) XOR k(1)));
  c(1) <= NOT(sig1(0) AND NOT(NOT(sig2(0)) AND c(0)));
  sig3(0) <= (NOT(k(2) OR sig1(0)) XOR NOT(k(3) OR sig2(0)));
  alu_out(0) <= NOT(sig3(0) XOR NOT(k(4) OR c(0)));
  zero <= '1' WHEN (alu_out = "0000") ELSE
     '0';
  f3 <= alu_out(3);
  np <= (((g(0) OR g(1)) OR g(2)) OR g(3)) WHEN ((NOT(i(0)) AND i(1) AND i(2)) = '1') ELSE
     (((g(0) OR g(1)) OR g(2)) OR g(3)) WHEN ((i(0) AND i(1) AND i(2)) = '1') ELSE
     NOT((((p(0) AND p(1)) AND p(2)) AND p(3))) WHEN ((NOT(i(0)) AND i(1) AND NOT(i(2))) = '1') ELSE
     NOT((((p(0) AND p(1)) AND p(2)) AND p(3))) WHEN ((i(0) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     NOT((((p(0) AND p(1)) AND p(2)) AND p(3))) WHEN ((NOT(i(0)) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     '0';
  ng <= NOT((((g(0) OR g(1)) OR g(2)) OR g(3))) WHEN ((i(0) AND NOT(i(1)) AND i(2)) = '1') ELSE
     NOT((((g(0) OR g(1)) OR g(2)) OR g(3))) WHEN ((NOT(i(0)) AND NOT(i(1)) AND i(2)) = '1') ELSE
     (((p(0) AND p(1)) AND p(2)) AND p(3)) WHEN ((i(0) AND i(1) AND NOT(i(2))) = '1') ELSE
     NOT((((g(3) OR (p(3) AND g(2))) OR ((p(3) AND p(2)) AND g(1))) OR (((p(1) AND p(2)
) AND p(3)) AND g(0)))) WHEN ((NOT(i(0)) AND i(1) AND NOT(i(2))) = '1') ELSE
     NOT((((g(3) OR (p(3) AND g(2))) OR ((p(3) AND p(2)) AND g(1))) OR (((p(1) AND p(2)
) AND p(3)) AND g(0)))) WHEN ((i(0) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     NOT((((g(3) OR (p(3) AND g(2))) OR ((p(3) AND p(2)) AND g(1))) OR (((p(1) AND p(2)
) AND p(3)) AND g(0)))) WHEN ((NOT(i(0)) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     ((((p(3) AND g(3)) OR ((p(3) AND p(2)) AND g(2))) OR (((p(3) AND p(2)) AND p(1)
) AND g(1))) OR (((p(3) AND p(2)) AND p(1)) AND p(0)));
  ovr <= (NOT((((g(0) OR g(1)) OR g(2)) OR g(3))) OR NOT(cin)) WHEN ((i(0) AND NOT(i(1)) AND i(2)) = '1') ELSE
     (NOT((((g(0) OR g(1)) OR g(2)) OR g(3))) OR NOT(cin)) WHEN ((NOT(i(0)) AND NOT(i(1)) AND i(2)) = '1') ELSE
     (NOT((((p(0) AND p(1)) AND p(2)) AND p(3))) OR cin) WHEN ((i(0) AND i(1) AND NOT(i(2))) = '1') ELSE
     (c(4) XOR c(3)) WHEN ((NOT(i(0)) AND i(1) AND NOT(i(2))) = '1') ELSE
     (c(4) XOR c(3)) WHEN ((i(0) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     (c(4) XOR c(3)) WHEN ((NOT(i(0)) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     NOT(((((p(3) AND g(3)) OR ((p(3) AND p(2)) AND g(2))) OR (((p(3) AND p(2)) AND p(1)
) AND g(1))) OR ((((p(3) AND p(2)) AND p(1)) AND p(0)) AND (g(0) OR NOT(cin)))));
  cout <= ((((g(0) OR g(1)) OR g(2)) OR g(3)) OR cin) WHEN ((i(0) AND NOT(i(1)) AND i(2)) = '1') ELSE
     ((((g(0) OR g(1)) OR g(2)) OR g(3)) OR cin) WHEN ((NOT(i(0)) AND NOT(i(1)) AND i(2)) = '1') ELSE
     (NOT((((p(0) AND p(1)) AND p(2)) AND p(3))) OR cin) WHEN ((i(0) AND i(1) AND NOT(i(2))) = '1') ELSE
     c(4) WHEN ((NOT(i(0)) AND i(1) AND NOT(i(2))) = '1') ELSE
     c(4) WHEN ((i(0) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     c(4) WHEN ((NOT(i(0)) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     ((((p(3) AND g(3)) OR ((p(3) AND p(2)) AND g(2))) OR (((p(3) AND p(2)) AND p(1)
) AND g(1))) OR ((((p(3) AND p(2)) AND p(1)) AND p(0)) AND (g(0) OR NOT(cin))));
  c(0) <= cin;
  k <= "10001" WHEN ((NOT(i(0)) AND i(1) AND i(2)) = '1') ELSE
     "10110" WHEN ((i(0) AND NOT(i(1)) AND i(2)) = '1') ELSE
     "10111" WHEN ((NOT(i(0)) AND NOT(i(1)) AND i(2)) = '1') ELSE
     "11011" WHEN ((i(0) AND i(1) AND NOT(i(2))) = '1') ELSE
     "00010" WHEN ((NOT(i(0)) AND i(1) AND NOT(i(2))) = '1') ELSE
     "00001" WHEN ((i(0) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     "00000" WHEN ((NOT(i(0)) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     "10000";
  c3 <= (((g(2) OR (p(2) AND g(1))) OR ((p(2) AND p(1)) AND g(0))) OR (((p(2) AND p(1))
 AND p(0)) AND cin));
  c4 <= ((((g(3) OR (p(3) AND g(2))) OR ((p(3) AND p(2)) AND g(1))) OR (((p(3) AND p(2)
) AND p(1)) AND g(0))) OR ((((p(3) AND p(2)) AND p(1)) AND p(0)) AND cin));
  g <= (NOT(r) AND s) WHEN ((NOT(i(0)) AND i(1) AND i(2)) = '1') ELSE
     (NOT(r) AND s) WHEN ((i(0) AND NOT(i(1)) AND i(2)) = '1') ELSE
     (NOT(r) AND s) WHEN ((i(0) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     (r AND s) WHEN ((i(0) AND i(1) AND i(2)) = '1') ELSE
     (r AND s) WHEN ((NOT(i(0)) AND NOT(i(1)) AND i(2)) = '1') ELSE
     (r AND s) WHEN ((i(0) AND i(1) AND NOT(i(2))) = '1') ELSE
     (r AND s) WHEN ((NOT(i(0)) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     (r AND NOT(s));
  p <= (NOT(r) OR s) WHEN ((NOT(i(0)) AND i(1) AND i(2)) = '1') ELSE
     (NOT(r) OR s) WHEN ((i(0) AND NOT(i(1)) AND i(2)) = '1') ELSE
     (NOT(r) OR s) WHEN ((i(0) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     (r OR s) WHEN ((i(0) AND i(1) AND i(2)) = '1') ELSE
     (r OR s) WHEN ((NOT(i(0)) AND NOT(i(1)) AND i(2)) = '1') ELSE
     (r OR s) WHEN ((i(0) AND i(1) AND NOT(i(2))) = '1') ELSE
     (r OR s) WHEN ((NOT(i(0)) AND NOT(i(1)) AND NOT(i(2))) = '1') ELSE
     (r OR NOT(s));
END VBE;
